#!/usr/bin/php
<?php
// Taken from https://github.com/mparker1001/githubstats. Please see associated README for instructions on how to use this script.

// Get API token and set timezone from environment variables
$token = getenv('GITHUB_TOKEN');
date_default_timezone_set(getenv('GITHUB_TIMEZONE'));

// Write script usage string
$str_usage = "usage:  githubstats -o <org_name> -s <start_date_in_YYYYMMDDHHMM> -e <end_date_in_YYYYMMDDHHMM> -u <github_username> -f <file_of_github_usernames>\n  Note that the -u or -f option is REQUIRED. If both options are used, the filename will be used.\n\n";

// Check and set arguments. If they do not exist, then stop the script
$options = getopt("s:e:o:u:f:");
$kill_script = false;

if ( is_null($options['s']) || $options['s'] == false ) {
  $str_error = "ERROR: Incorrect or Missing Start Date\n";
  $kill_script = true;
}

if ( is_null($options['e']) || $options['e'] == false ) {
  $str_error .= "ERROR: Incorrect or Missing End Date\n";
  $kill_script = true;
}

if ( is_null($options['o']) || $options['o'] == false ) {
  $str_error .= "ERROR: Incorrect or Missing Organization\n";
  $kill_script = true;
}

if ( ( is_null($options['u']) || $options['u'] == false ) && ( is_null($options['f']) || $options['f'] == false ) ) {
  $str_error .= "ERROR: Incorrect or Missing Organization\n";
  $kill_script = true;
}

if ($kill_script) {
  echo $str_error;
  die($str_usage);
}
else {
  $start_date = date("c",strtotime($options['s']));
  $end_date = date("c",strtotime($options['e']));
  $organization = $options['o'];
  $username = @$options['u'];
  $userfile = @$options['f'];
}

var_dump($options);
die();
// Set cache filenames
$orgcachefile = "orgdata.cache";

// Set cache expire time - 1 hour by default
$cache_expire_time = "3600";

// Initialize boolen which will be used to control looping through paged results
$has_more = false;

// Zero out commits variable
$totalcommits = 0;

// Be sure the arrays containing the API data are cleared before running
unset($orgdata);
unset($temporgdata);
$orgdata=array();
$temporgdata=array();

// Declare get headers from curl response function
function get_headers_from_curl_response($response)
{
    $headers = array();
    $header_text = substr($response, 0, strpos($response, "\r\n\r\n"));

    foreach (explode("\r\n", $header_text) as $i => $line)
        if ($i === 0)
            $headers['http_code'] = $line;
        else
        {
            list ($key, $value) = explode(': ', $line);
            $headers[$key] = $value;
        }
    return $headers;
}


/* --- Get repos from organization --- */

if ( (time() - @filemtime($orgcachefile)) > $cache_expire_time ) { // If the cache file does not exist or is expired, get the org data from the API
  @unlink($orgcachefile);
  do {

    // Set endpoint based on org name if this is the first run
    if ( $has_more == false ) {
      $endpoint = "https://api.github.com/orgs/$organization/repos";
    }

    // Set cURL options
    $ch = curl_init();
    curl_setopt($ch,CURLOPT_URL, $endpoint);
    curl_setopt($ch,CURLOPT_HEADER, true);
    curl_setopt($ch,CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch,CURLOPT_HTTPHEADER, array("Authorization: token $token", "User-Agent: PHP"));

    // Post the curl command and save the resulting data set
    $result = curl_exec($ch);
    $header_size = curl_getinfo($ch, CURLINFO_HEADER_SIZE);
    $headers = get_headers_from_curl_response(substr($result, 0, $header_size));
    $temporgdata = json_decode(substr($result, $header_size),true);
    $orgdata = array_merge($orgdata, $temporgdata);

    // Determine if this is the last page of the data
    $link = explode(" ", $headers['Link']);
    if ( strpos($link[1],"next") != false ) {
      $has_more = true;
      $endpoint = str_replace(array("<",">",";",), "" ,$link[0]);
    }
    else {
      $has_more = false;
    }

  } while ( $has_more == true );

  // After looping through all the pages, save the org data to a cache file
  file_put_contents($orgcachefile, json_encode($orgdata));

}
else { // If the cache file is not expired, import the org data from the cache file
  $orgdata = json_decode(file_get_contents($orgcachefile), true);
}


/* --- Pull commit data from each repo in organization --- */

// Reset loop control variable
$has_more = false;

// Echo information about information being pulled and table headers
echo "Github commits for $username in $organization between " . date("Y-m-d h:i A",strtotime($start_date)) . " and " . date("Y-m-d h:i A",strtotime($end_date)) . "\n";
echo str_pad("Organization",40) . str_pad("Commits",8) . "\n";
echo str_pad("------------",40) . str_pad("-------",8) . "\n";

foreach($orgdata as $org) {

  // Clear arrays containing commit data and commits variable
  unset($commitdata);
  unset($tempcommitdata);
  $commitdata=array();
  $tempcommitdata=array();
  $orgcommits = 0;

  // Set API endpoint
  $endpoint = strval($org['url']) . "/commits?since=$start_date&until=$end_date&author=$username";

  do {
    // Set cURL options
    $ch = curl_init();
    curl_setopt($ch,CURLOPT_URL, $endpoint);
    curl_setopt($ch,CURLOPT_HEADER, true);
    curl_setopt($ch,CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch,CURLOPT_HTTPHEADER, array("Authorization: token $token", "User-Agent: PHP"));

    // Post the curl command and save the resulting data set
    $result = curl_exec($ch);
    $header_size = curl_getinfo($ch, CURLINFO_HEADER_SIZE);
    $headers = get_headers_from_curl_response(substr($result, 0, $header_size));
    $tempcommitdata = json_decode(substr($result, $header_size),true);

    if ( $headers['Status'] == "200 OK" ) {  // Ensure that API call is OK and the repo is not empty
      $commitdata = array_merge($commitdata, $tempcommitdata);
      $orgcommits += count($commitdata);

      // Determine if this is the last page of the data
      $link = explode(" ", $headers['Link']);
      if ( strpos($link[1],"next") != false ) { // There is another page of data, set control variable to true
        $has_more = true;
        $endpoint = str_replace(array("<",">",";",), "" ,$link[0]); // Get API endpoint of next page
      }
      else { // No more pages of data, set control variable to false
        $has_more = false;
      }
    }
    elseif ( $headers['Status'] == "409 Conflict" ) {  // Either the repo is empty or the repo commit data could not be read. Continue the script but return the error message
      $orgcommits = $tempcommitdata['message'];
      $has_more = false;
    }
    else { // Some other error occurred. Kill the script and return the status code
      die($headers['Status']);
    }

  } while ( $has_more == true );

  // Sum up commits and echo the repo commit totals
  $totalcommits += $orgcommits;
  echo str_pad($org['name'],40) . str_pad($orgcommits,8) . "\n";
  
}

// Echo total commits
echo str_pad("-----",40) . str_pad("---",8) . "\n";
echo str_pad("Total",40) . str_pad($totalcommits,8) . "\n";

?>
