#!/usr/bin/php
<?php
// Taken from https://github.com/mparker1001/githubstats. Please see associated README for instructions on how to use this script.

// Get API token and set timezone from environment variables
$token = getenv('GITHUB_TOKEN');
date_default_timezone_set(getenv('GITHUB_TIMEZONE'));

// Set cache filenames
$orgcachefile = "orgdata.cache";

// Set cache expire time - 1 hour by default
$cache_expire_time = "3600";

// Configure script usage message
$str_usage = <<<EOD
usage:  githubstats -o <org_name> -s <start_date_in_YYYYMMDDHHMM> -e <end_date_in_YYYYMMDDHHMM> -u <github_username> -f <file_of_github_usernames> -d (Optional)
  Note that the -u or -f option is REQUIRED. If both options are used, the filename will be used.

EOD;

// Initialize variables - Do not change these
unset($orgdata);
unset($temporgdata);
unset($allcommitdata);
$orgdata=array();
$temporgdata=array();
$allcommitdata=array();
$totalcommits = 0;
$has_more = false;

// Declare get headers from curl response function
function get_headers_from_curl_response($response)
{
    $headers = array();
    $header_text = substr($response, 0, strpos($response, "\r\n\r\n"));

    foreach (explode("\r\n", $header_text) as $i => $line)
        if ($i === 0)
            $headers['http_code'] = $line;
        else
        {
            list ($key, $value) = explode(': ', $line);
            $headers[$key] = $value;
        }
    return $headers;
}


/* --- Check and set command line arguments --- */

$options = getopt("ds:e:o:u:f:");
$kill_script = false;

if ( is_null($options['s']) || $options['s'] == false ) {
  $str_error = "ERROR: Incorrect or Missing Start Date. The -s option is requried.\n";
  $kill_script = true;
}

if ( is_null($options['e']) || $options['e'] == false ) {
  $str_error .= "ERROR: Incorrect or Missing End Date. The -e option is required.\n";
  $kill_script = true;
}

if ( is_null($options['o']) || $options['o'] == false ) {
  $str_error .= "ERROR: Incorrect or Missing Organization. The -o option is required.\n";
  $kill_script = true;
}

if ( ( is_null($options['u']) || $options['u'] == false ) && ( is_null($options['f']) || $options['f'] == false ) ) {
  $str_error .= "ERROR: You must use the -u or -f option.\n";
  $kill_script = true;
}

if ($kill_script) {
  echo $str_error;
  die($str_usage);
}
else {
  $start_date = date("c",strtotime($options['s']));
  $end_date = date("c",strtotime($options['e']));
  $commitcachefile = "commitdata_" . strtotime($options['s']) . "_" . strtotime($options['e']) . ".cache";
  $organization = $options['o'];
  if ( is_null($options['f']) || $options['f'] == false ) {
    $userlist[0] = $options['u'];
  }
  else {
    $userlist = file($options['f'], FILE_IGNORE_NEW_LINES);
  }
  if ( array_key_exists("d",$options) ) {
    $showdetail = true;
  }
}


/* --- Get repos from organization --- */

if ( (time() - @filemtime($orgcachefile)) > $cache_expire_time ) { // If the cache file does not exist or is expired, get the org data from the API
  @unlink($orgcachefile);
  do {

    // Set endpoint based on org name if this is the first run
    if ( $has_more == false ) {
      $endpoint = "https://api.github.com/orgs/$organization/repos";
    }

    // Set cURL options
    $ch = curl_init();
    curl_setopt($ch,CURLOPT_URL, $endpoint);
    curl_setopt($ch,CURLOPT_HEADER, true);
    curl_setopt($ch,CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch,CURLOPT_HTTPHEADER, array("Authorization: token $token", "User-Agent: PHP"));

    // Post the curl command and save the resulting data set
    $result = curl_exec($ch);
    $header_size = curl_getinfo($ch, CURLINFO_HEADER_SIZE);
    $headers = get_headers_from_curl_response(substr($result, 0, $header_size));
    $temporgdata = json_decode(substr($result, $header_size),true);
    $orgdata = array_merge($orgdata, $temporgdata);

    // Determine if this is the last page of the data
    $link = explode(" ", $headers['Link']);
    if ( strpos($link[1],"next") != false ) {
      $has_more = true;
      $endpoint = str_replace(array("<",">",";",), "" ,$link[0]);
    }
    else {
      $has_more = false;
    }

  } while ( $has_more == true );

  // After looping through all the pages, save the org data to a cache file
  file_put_contents($orgcachefile, json_encode($orgdata));

}
else { // If the cache file is not expired, import the org data from the cache file
  $orgdata = json_decode(file_get_contents($orgcachefile), true);
}


/* --- Pull commit data from each repo in organization --- */

// Reset loop control variable
$has_more = false;

if ( (time() - @filemtime($commitcachefile)) > $cache_expire_time ) { // If the cache file does not exist or is expired, get the commit data from the API
  @unlink($commitcachefile);

  foreach($orgdata as $org) {

    // Clear arrays containing commit data and commits variable
    unset($commitdata);
    unset($tempcommitdata);
    $commitdata=array();
    $tempcommitdata=array();
    $orgcommits = 0;

    // Set API endpoint
    $endpoint = strval($org['url']) . "/commits?since=$start_date&until=$end_date";

    do {
      // Set cURL options
      $ch = curl_init();
      curl_setopt($ch,CURLOPT_URL, $endpoint);
      curl_setopt($ch,CURLOPT_HEADER, true);
      curl_setopt($ch,CURLOPT_RETURNTRANSFER, true);
      curl_setopt($ch,CURLOPT_HTTPHEADER, array("Authorization: token $token", "User-Agent: PHP"));

      // Post the curl command and save the resulting data set
      $result = curl_exec($ch);
      $header_size = curl_getinfo($ch, CURLINFO_HEADER_SIZE);
      $headers = get_headers_from_curl_response(substr($result, 0, $header_size));
      $tempcommitdata = json_decode(substr($result, $header_size),true);

      if ( $headers['Status'] == "200 OK" ) {  // Ensure that API call is OK and the repo is not empty
        $commitdata = array_merge($commitdata, $tempcommitdata);

        // Determine if this is the last page of the data
        $link = explode(" ", $headers['Link']);
        if ( strpos($link[1],"next") != false ) { // There is another page of data, set control variable to true
          $has_more = true;
          $endpoint = str_replace(array("<",">",";",), "" ,$link[0]); // Get API endpoint of next page
        }
        else { // No more pages of data, set control variable to false
          $has_more = false;
        }
      }
      elseif ( $headers['Status'] == "409 Conflict" ) {  // Either the repo is empty or the repo commit data could not be read. Continue the script but return the error message
        $orgcommits = $tempcommitdata['message'];
        $has_more = false;
      }
      else { // Some other error occurred. Kill the script and return the status code
        die($headers['Status']);
      }

    } while ( $has_more == true );

    $orgname = $org["name"];
    $allcommitdata[$orgname] = $commitdata;
  }

  // Store the contents into a cache file
  file_put_contents($commitcachefile, json_encode($allcommitdata));

}
else { // If the cache file is not expired, import the commit data from the cache file
  $allcommitdata = json_decode(file_get_contents($commitcachefile), true);
}


/* --- Display user commit stats --- */

foreach ($userlist as $username) {
  $totalcommits = 0;

  // Echo information about information being pulled and table headers
  echo "Github commits for $username in $organization between " . date("Y-m-d h:i A",strtotime($start_date)) . " and " . date("Y-m-d h:i A",strtotime($end_date)) . "\n";
  if ($showdetail) {
    echo str_pad("Organization",40) . str_pad("Commits",8) . "\n";
    echo str_pad("------------",40) . str_pad("-------",8) . "\n";
  }

  foreach ($allcommitdata as $key => $orgcommitdata) {
    $orgcommits = 0;
    foreach ($orgcommitdata as $commit) {
      if ($commit["committer"]["login"] == $username) {
        $orgcommits += 1;
      }
    }
    // Sum up commits and echo the repo commit totals
    $totalcommits += $orgcommits;
    if ($showdetail) {
      echo str_pad($key,40) . str_pad($orgcommits,8) . "\n";
    }
  }
  // Echo total commits
  echo str_pad("-----",40) . str_pad("---",8) . "\n";
  echo str_pad("Total",40) . str_pad($totalcommits,8) . "\n\n";
}

?>
